name: Create Tag

env:
  NODE_VERSION: 20.x # 设置 Node.js 版本环境变量

on:
  push:
    branches:
      - main

jobs:
  # =====================
  # Job 1: 自动化语义化版本发布（生成版本号、打 tag、更新 CHANGELOG）
  # =====================
  release:
    name: 🚀 Semantic 版本发布
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    # 跳过 CI 的提交
    if: "!contains(github.event.head_commit.message, 'skip ci')"

    outputs:
      new_release_published: ${{ steps.release.outputs.new_release_published }}
      new_release_version: ${{ steps.release.outputs.new_release_version }}
      current_tag: ${{ steps.release.outputs.current_tag }}
      previous_tag: ${{ steps.release.outputs.previous_tag }}
      changelog_preview: ${{ steps.release.outputs.changelog_preview }}

    steps:
      - name: 🔍 1. 拉取代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 必须完整历史以支持 semantic-release 判断变更

      - name: ⚙️ 2. 设置 Node.js 环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 3. 安装依赖
        run: npm ci

      - name: 📢 4. 执行 semantic-release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PERSONAL_TOKEN }}
        run: |
          echo "🔍 4.1 开始执行 semantic-release..."
          set +e  # 允许捕获错误而不立即退出
          OUTPUT=$(npx semantic-release --debug 2>&1)
          EXIT_CODE=$?
          set -e

          echo "📋 4.2 semantic-release 执行结果："
          echo "$OUTPUT"

          # 检查是否发布了新版本
          if echo "$OUTPUT" | grep -q "Published release"; then
            echo "✅ 4.3 检测到新版本已发布"

            # 提取新旧版本号
            NEW_VERSION=$(echo "$OUTPUT" | grep -oP 'The next release version is \K\d+\.\d+\.\d+')
            PREVIOUS_TAG=$(git tag -l 'v*' --sort=-version:refname | grep -v "$NEW_VERSION" | head -n1 || echo "")

            # 设置输出变量
            echo "new_release_published=true" >> $GITHUB_OUTPUT
            echo "new_release_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "current_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

            # 提取 CHANGELOG 预览（最多前 5 行）
            if [[ -f "CHANGELOG.md" ]]; then
              PREVIEW=$(grep -A 5 "^## \\[v\\?$NEW_VERSION\\?\\]" CHANGELOG.md | head -n 5 | sed "s/'/''/g" | tr '\n' ' ')
              echo "changelog_preview='$PREVIEW'" >> $GITHUB_OUTPUT
            fi

            echo "🎉 发布成功：v$NEW_VERSION"
          else
            echo "ℹ️ 4.4 无需发布新版本（无符合规则的提交）"
            echo "new_release_published=false" >> $GITHUB_OUTPUT
            echo "new_release_version=" >> $GITHUB_OUTPUT
            echo "current_tag=" >> $GITHUB_OUTPUT
            echo "previous_tag=" >> $GITHUB_OUTPUT
            echo "changelog_preview=" >> $GITHUB_OUTPUT
          fi

          # 强制返回原始 exit code，确保 CI 正确反映发布失败
          exit $EXIT_CODE

      - name: 🐞 5. 调试输出
        if: always()
        run: |
          echo "✅ ==== LOG === ✅"
          echo "👉 需要发布 : ${{ steps.release.outputs.new_release_published }}"
          echo "👉 当前版本: ${{ steps.release.outputs.new_release_version }}"
          echo "👉 当前版本  Tag: ${{ steps.release.outputs.current_tag }}"
          echo "👉 上个版本 Tag: ${{ steps.release.outputs.previous_tag }}"
          echo "👉 日志预览: ${{ steps.release.outputs.changelog_preview }}"
